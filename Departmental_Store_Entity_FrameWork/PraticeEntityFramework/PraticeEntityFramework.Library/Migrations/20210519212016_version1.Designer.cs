// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PraticeEntityFramework.Library.Infrastructure;

namespace PraticeEntityFramework.Library.Migrations
{
    [DbContext(typeof(DepartmentalStoreContext))]
    [Migration("20210519212016_version1")]
    partial class version1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Address", b =>
                {
                    b.Property<long>("Address_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Address_Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Customer", b =>
                {
                    b.Property<long>("Customer_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Address_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Phone_Number")
                        .HasColumnType("text");

                    b.HasKey("Customer_Id");

                    b.HasIndex("Address_Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Inventory", b =>
                {
                    b.Property<string>("Product_Code")
                        .HasColumnType("text");

                    b.Property<string>("Brand_Name")
                        .HasColumnType("text");

                    b.Property<bool>("InStock")
                        .HasColumnType("boolean");

                    b.Property<long>("Product_Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Product_Code");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.OrderDetail", b =>
                {
                    b.Property<int>("Order_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Address_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Customer_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date_Of_Delivery")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date_Of_Order")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Ordered_Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Product_Code")
                        .HasColumnType("text");

                    b.Property<int>("Supplier_Id")
                        .HasColumnType("integer");

                    b.HasKey("Order_Id");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Product", b =>
                {
                    b.Property<string>("Product_Code")
                        .HasColumnType("text");

                    b.Property<int>("Category_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Expiry_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Manufacturing_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Product_Name")
                        .HasColumnType("text");

                    b.HasKey("Product_Code");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategory_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category_Name")
                        .HasColumnType("text");

                    b.HasKey("ProductCategory_Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.ProductPrice", b =>
                {
                    b.Property<string>("Product_Code")
                        .HasColumnType("text");

                    b.Property<decimal>("Cost_Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date_Of_Register")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Selling_Price")
                        .HasColumnType("numeric");

                    b.HasKey("Product_Code");

                    b.ToTable("productPrices");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Role", b =>
                {
                    b.Property<int>("Role_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Role_Name")
                        .HasColumnType("text");

                    b.HasKey("Role_Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Staff", b =>
                {
                    b.Property<long>("Staff_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Address_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("First_Name")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Last_Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("text");

                    b.Property<int>("Role_Id")
                        .HasColumnType("integer");

                    b.Property<long>("Salary")
                        .HasColumnType("bigint");

                    b.HasKey("Staff_Id");

                    b.HasIndex("Address_Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Supplier", b =>
                {
                    b.Property<long>("Supplier_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Address_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Address_Id1")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("First_Name")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Last_Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("text");

                    b.HasKey("Supplier_Id");

                    b.HasIndex("Address_Id1");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Customer", b =>
                {
                    b.HasOne("PraticeEntityFramework.Library.Entites.Address", "Address")
                        .WithMany("Customer")
                        .HasForeignKey("Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Product", b =>
                {
                    b.HasOne("PraticeEntityFramework.Library.Entites.Inventory", "Inventory")
                        .WithOne("Product")
                        .HasForeignKey("PraticeEntityFramework.Library.Entites.Product", "Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.ProductPrice", b =>
                {
                    b.HasOne("PraticeEntityFramework.Library.Entites.Product", "Product")
                        .WithMany("ProductPrice")
                        .HasForeignKey("Product_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Staff", b =>
                {
                    b.HasOne("PraticeEntityFramework.Library.Entites.Address", "Address")
                        .WithMany("Staff")
                        .HasForeignKey("Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PraticeEntityFramework.Library.Entites.Role", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PraticeEntityFramework.Library.Entites.Supplier", b =>
                {
                    b.HasOne("PraticeEntityFramework.Library.Entites.Address", "Address")
                        .WithMany("Supplier")
                        .HasForeignKey("Address_Id1");
                });
#pragma warning restore 612, 618
        }
    }
}
